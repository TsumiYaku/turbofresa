#!/usr/bin/env python3
"""
    T.U.R.B.O.F.R.E.S.A.
    Turboaggeggio Utile alla Rimorzione di Byte Obrobriosi e di Abominevoli
    File da dischi rigidi Riciclati ed altri Elettronici Sistemi di
    Accumulazione (semi)permanente di dati.
    Copyright (C) 2018  Hyd3L

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os
import sys
import argparse
import datetime
import threading

LOG_PATH = 'log.txt'
ERROR, WARNING, INFO = range(0,3)
VERBOSITY = INFO

"""
    @return a formatted string containing current date and time
"""
def now():
    return datetime.datetime.now().strftime('[%Y-%m-%d %H:%M:%S] ')


"""
    Console : class for printing errors, warnings and info messages
              to the stdout and into the log file.

    @member printLevel : verbosity level (ERROR, WARNING or INFO)
    @member logFile    : the log file pointer

    @method info : prints info msg to stdout and to the logFile
    @method warn : prints warning to stdout and to the logFile
    @method err  : prints error to stdout and to the logFile
"""
class Console(object):
    def __init__(self):
        self.printLevel = VERBOSITY
        self.logFile = open(LOG_PATH, "a")
        if self.logFile is None:
            print("error: Permission denied. Log file couldn't be created.")
            sys.exit(1)

    def info(self, str):
        if self.printLevel >= INFO:
            print("info: "+str)
            self.logFile.write(now()+"info: "+str+'\n')

    def warn(self, str):
        if self.printLevel >= WARNING:
            print("warning: "+str)
            self.logFile.write(now()+"warning: "+str+'\n')

    def error(self, str):
        if self.printLevel >= ERROR:
            print("error: "+str)
            self.logFile.write(now()+"error: "+str+'\n')


"""
    Task : class for the runnable thread

    @member disk  : the disk dev path (eg. /dev/sdb )
    @member tasks : things to be done with the disk
"""
class Task(object):
    def __init__(self):
        self.disk = str()
        self.tasks = list()
