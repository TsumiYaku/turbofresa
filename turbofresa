#!/usr/bin/env python3
"""
    T.U.R.B.O.F.R.E.S.A.
    Turboaggeggio Utile alla Rimorzione di Byte Obrobriosi e di abominevoli
    File da dischi rigidi Riciclati ed altri Elettronici Sistemi di
    Accumulazione (semi)permanente di dati.
    Copyright (C) 2018  Hyd3L

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os
import sys
import datetime
import threading

LOG_PATH = '../log.txt'
# Verbosity levels
ERROR, WARNING, INFO = range(0,3)
VERBOSITY = INFO

# Disk operations
o_bblocks, o_fast, o_paranoia, o_check = range(0,4)


"""
    @return a formatted string containing current date and time
"""
def now():
    return datetime.datetime.now().strftime('[%Y-%m-%d %H:%M:%S] ')


"""
    Console : class for printing errors, warnings and info messages
              to the stdout and into the log file.

    @member printLevel : verbosity level (ERROR, WARNING or INFO)
    @member logFile    : the log file pointer

    @method info : prints info msg to stdout and to the logFile
    @method warn : prints warning to stdout and to the logFile
    @method err  : prints error to stdout and to the logFile
"""
class Console(object):
    def __init__(self):
        self.printLevel = VERBOSITY
        try:
            self.logFile = open(LOG_PATH, "a")
        except IOError:
            print("error: Permission denied. Log file couldn't be created.")
            sys.exit(1)

    def info(self, msg, toStdOut=True):
        if self.printLevel >= INFO:
            if toStdOut is True:
                print("info: "+msg)
            self.logFile.write(now()+"info: "+msg+'\n')

    def warn(self, msg, toStdOut=True):
        if self.printLevel >= WARNING:
            if toStdOut is True:
                print("warning: "+msg)
            self.logFile.write(now()+"warning: "+msg+'\n')

    def error(self, msg, toStdOut=True):
        if self.printLevel >= ERROR:
            if toStdOut is True:
                print("error: "+msg)
            self.logFile.write(now()+"error: "+msg+'\n')

    def exit(self):
        self.logFile.close()

# Initialize log
log = Console()


# DriveNotFoundError : Exception to handle /dev/sdX not found
class DriveNotFoundError(BaseException):
    pass

# Moron : Exception to be raised in case of morons using this script
class Moron(BaseException):
    pass


"""
    Task : class for the runnable thread

    @member disk  : the disk dev path (eg. /dev/sdb )
    @member tasks : things to be done with the disk

    @method sanityCheck : check args before running the task
    @method run : run thread
"""
class Task(object):
    def __init__(self, path, ops):
        self.disk = path
        self.tasks = ops

    def sanityCheck(self):
        try:
            if os.path.exists(self.disk) is False:
                raise DriveNotFoundError
        except DriveNotFoundError:
            log.error("Hard drive "+self.disk+" not found.")
            log.exit()
            sys.exit(1)
        try:
            if '/dev/sda' in self.disk:
                raise Moron
        except Moron:
            moron_name = input("Type your name and press ENTER: ")
            log.error("%s is trying to fuck up everything."%(moron_name), False)
            print("Thank you %s! Now go and clean the Groot please."%(moron_name))
            log.exit()
            sys.exit(1)

    def run(self):
        # TODO: To be implemented
        pass


"""
	Parse command line args.
	@return list of Task() objects, ready to be run
"""
def parseArgs():
    argc = len(sys.argv)
    args = sys.argv
    tasks = list()

    try:
        if argc < 2:
            raise SyntaxError
        elif args[1] == '-h' or args[1] == '--help':
            # TODO: To be implemented
            pass
        else:
            for i in range(1, argc):
                ops = [False, False, False, False]
                if args[i].startswith('-'):
                    for o in range(1,len(args[i])):
                        if 'b' in args[i]:
                            ops[o_bblocks] = True
                        if 'f' in args[i]:
                            ops[o_fast] = True
                        if 'p' in args[i]:
                            ops[o_paranoia] = True
                        if 'c' in args[i]:
                            ops[o_check] = True
                    i += 1
                    while args[i].startswith('/'):
                        tasks.append(Task(args[i], ops))
                        if i + 1 == argc: break
                        i += 1
                    if not args[i].startswith('/'):
                        if not args[i].startswith('-'):
                            raise SyntaxError
    except SyntaxError:
        log.error("Invalid syntax detected.")
        log.exit()
        sys.exit(1)
    return tasks


def main():
    tasks = parseArgs()
    for t in tasks:
        t.sanityCheck()


if __name__ == '__main__':
    main()
